package com.borqs.ai.activity;

import java.util.LinkedList;
import java.util.List;

import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.Window;
import android.widget.LinearLayout;
import android.widget.TabWidget;
import android.widget.TextView;
import android.widget.TabHost.TabSpec;

import com.borqs.ai.AutoInbox;
import com.borqs.ai.MessageProvider;
import com.borqs.ai.R;
import com.borqs.ai.provider.AutoInboxContent.Message;

public class AutoInboxActivity extends FragmentActivity
        implements SelectionFragment.OnTabSelectListener {

    private int mProviderType;
    private MessageListFragment mMessageListFragment;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.auto_inbox_activity);
    }
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.auto_inbox_activity, menu);
        return true;
    }

    private void onOpenMessageList(int providerType, long messageId) {
        mProviderType = providerType;
        if (AutoInbox.DEBUG) {
            Log.d(AutoInbox.TAG, "open " + MessageProvider.getName(this, providerType));
        }
        
        FragmentManager fm = this.getSupportFragmentManager();
        final FragmentTransaction ft = fm.beginTransaction();
        removeMessageListFragment(ft);
        mMessageListFragment = (MessageListFragment) MessageListFragment.newInstance(providerType);
        ft.add(R.id.message_list_fragment, mMessageListFragment);
        mRemovedFragments.remove(mMessageListFragment);
        
        if (messageId != Message.NO_MESSAGE) {
            //updateMessageView(ft, messageId);
        }
        
        if (!ft.isEmpty()) {
            ft.commitAllowingStateLoss();
        }
        
        fm.executePendingTransactions();
    }

    private final List<Fragment> mRemovedFragments = new LinkedList<Fragment>();
    private void removeMessageListFragment(FragmentTransaction ft) {
        if (mMessageListFragment == null) {
            return;
        }
        if (!mRemovedFragments.contains(mMessageListFragment)) {
            ft.remove(mMessageListFragment);
            mRemovedFragments.add(mMessageListFragment);
        }
    }

    // Implement SelectionFragment.OnTabSelectListener
    @Override
    public void onTabSelected(int providerType) {
        onOpenMessageList(providerType, Message.NO_MESSAGE);
    }
}
